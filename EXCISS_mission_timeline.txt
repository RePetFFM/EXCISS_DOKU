[ard] = arduino pro mini
[pi] = raspberry pi

pre flight phase
------------------------------------------
[do]			Charg battery to storage voltage.
[do]			Shutdown raspi and arduino.
[check]			RTC must be still powered by lipo.
[check] 		Only powered component is the RTC.
[set][ard]		set USB Switch to transfer mode.
[set][ard]		setting the babysitter battery charg from USB


ISS transfer
------------------------------------------
[info]	Keep in mind, launch can be delayed due bad weather etc. Hence time/date based activation etc. is not a good practice.


ISS USB power first or power restore event
------------------------------------------
[event][ard]	Arduino get power from Frame.
[cond][ard]		if terminal shutdown state for sample return, turn off Vsys.
[exec][ard]		Arduino increment boot counter and store in NVM.
[exec][ard]		Store current boot datetime in NVM.
[exec][ard]		After bootup, switch to arduino power preserve.
[exec][ard]		Check battery status via sparkfun babysitter, append to the log in NVM.
[exec][ard]		Switch USB dataswitch to Frame.


powermanagment statemachine
------------------------------------------
[ard]	USB power state transition detction and decode command (example power on/off sequence 10sec off., 10sec on, 10sec off and after 10sec keep on). Recovery mode start.
[ard]	If USB power is down for specifite duration, then turn off Vsys.
[ard]	Shutdown Vsys if any thermal or battery fault is detected.
[cond][ard]		check Frame USB Power status over PGOOD
[store][ard]	store science mission "go" or "no go"
[store][ard]	add store last error bits (must be cleared by raspberry pi via serial command after appending the error codes in downlink transfer logfile).
[store][ard]	store current battery level and any battery health related values.
[store][ard]	store current gauge values, max and min values are stored as peak value.


mission loop
------------------------------------------
[exec][ard]		Check for outside data transfer window time frame.
[cond][ard]		Waiting until batterie is charged to mission phase voltage. Keep in mind, don't set the mission start charg leve to 100% due to battery degradation.


**** if raspberry start condition is green
[exec][ard]		Power on Raspberry PI with 5min keepalive timer.

**** after bootup from SCU execute initialization scripts
[exec][ard][pi]	get date time from arduino(RTC) via serial read request. Or if datetime setter file is present, then send to arduino. 

[exec][ard][pi]	Read from arduino last stored status and error informations for health logfile.

[check][pi]		check USB A status. Store USB status.
[check][pi]		check USB B status. Store USB status.
[exec][pi]		define [main recording mass storage] based on USB A/B status

[exec][pi]		Check for new config and python code on transfer USB.

[cond][pi][ard]	If mission end kill config information detected. Do final shutdown.

[info][check]	blacklist usb device mounting on booting.

[exec][pi]		store health logfile with datetime and incremented integer value (prevent overwriting in case off RTC error) to the active storage.



**** after init, start mission script
[exec][pi]		Start main mission
[exec][ard][pi]	requesting distance to next data transfer start time and current power data
[cond]			if condition is green for science proceed, if not send shudown command to MCU via UART.

[exec][pi][ard]	sending keepalive time in seconds.

[exec][pi][ard]	turn off all LED's
[exec][pi]		take dark still image for pixel error reference on USB Stick [main recording mass storage]
[exec][pi][ard]	turn on shaker for 1 sec
[exec][pi][ard]	turn on all LED's
[exec][pi]		take 3 still images in 2 sec interval on USB Stick [main recording mass storage]
[exec][pi][ard]	?(turn on shaker for 1 sec)
[exec][pi]		start video recording with high framerate on USB Stick [main recording mass storage]
[cond][pi]		wait 2 sec
[exec][pi][ard]	?(turn on shaker for 1 sec and wait 0.5 sec)
[cond][ard][pi]	[not final] Waiting for full charg of ignition coil.
[exec][pi][ard]	ignition
[exec][pi][ard]	set timer for next science mission in seconds
[cond][pi]		wait for 3 min
[exec][pi]		stop high frame rate recording
[exec][pi]		start copying in background high frame rate video from USB Stick [main recording mass storage] to transfer USB stick
[exec][pi]		start copying in background high frame rate video from USB Stick [main recording mass storage] to backup USB stick
[exec][pi]		start low frame rate recording / begin still timelaps with burst LED exposure on USB Stick [main recording mass storage]
[cond][pi]		wait for 7 min
[exec][pi][ard]	turn off all LED's
[exec][pi]		start copying low frame rate video from USB Stick [main recording mass storage] to backup USB stick
[exec][ard][pi]	Read from arduino last stored status and error informations for health logfile.
[exec][pi]		Write health logfile to Transfer USB
[exec][pi]		unmount USB sticks

[exec][pi][ard]	sending keepalive time with estimated shutdown duration
[exec][pi]		shutdown raspberry pi
[exec][ard]		if keepalive is expired turn down 5V and 8V switched power
[exec][ard]		loop back to mission loop start


[exec][ard]		loop exit conditions
	[cond][ard]		no USB Power for defined seconds.
	[cond][ard]		OR terminal shutdown is set.



shutdown
------------------------------------------
[exec][ard]		If raspberry ist still on try gracefull shutdown wait for 3min
[exec][ard]		Turn off all LED's
[exec][ard]		Turn off Raspberry
[exec][ard]		trigger multiple ignites, to prevent charged capacitor.
[exec][ard]		Turn off Arduino
[info]			If USB power is restored then "ISS USB power first or power restore event" must be triggered.


terminal shutdown
------------------------------------------
[exec][ard]		If raspberry ist still on try gracefull shutdown wait for 3min.
[exec][ard]		Turn on all LED's to 30%. This will drain the Battery power. 
[exec][ard]		Turn off Raspberry.
[exec][ard]		store state terminal shutdown.
[info]			If USB power is restored then "ISS USB power first or power restore event" must be triggered.


sample return
------------------------------------------
[info]		keep it turn off


data extraction
------------------------------------------
[do]		pull USB Sticks


data analysis
------------------------------------------